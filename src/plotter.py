from matplotlib import pyplot as plt
import numpy as np
from random import uniform
from constants import ROWS_NUMBER, COLUMNS_NUMBER, ROAD, HABITATION, PRODUCTIVITY_MAX, PROXIMITY_MAX, COMPACTNESS_MAX, \
    PRODUCTIVITY_MIN, PROXIMITY_MIN, COMPACTNESS_MIN
from Population import Population


def plot_data(data):
    """
    Affiche les graphiques des données de parcelles.

    :param data: Les données à afficher
    :return: La figure contenant les graphiques
    """
    figure, axs = plt.subplots(2, 2, figsize=(30, 6))

    plot1 = axs[0][0].imshow(data.get_usage_map_matrix(), cmap="bwr_r", interpolation="nearest", vmin=0.5, vmax=3.5)
    axs[0][0].set_title("Map")
    figure.colorbar(plot1, ax=axs[0][0], location="left")

    plot2 = axs[0][1].imshow(data.get_productivity_matrix(), cmap="Greens", interpolation="nearest")
    axs[0][1].set_title("Productivité des parcelles")
    figure.colorbar(plot2, ax=axs[0][1], location="right")

    plot3 = axs[1][0].imshow(data.get_proximity_matrix(), cmap="inferno", interpolation="nearest")
    axs[1][0].set_title("Proximité de zones habitées des parcelles")
    figure.colorbar(plot3, ax=axs[1][0], location="left")

    plot4 = axs[1][1].imshow(data.get_cost_matrix(), cmap="copper_r", interpolation="nearest")
    axs[1][1].set_title("Coût des parcelles")
    figure.colorbar(plot4, ax=axs[1][1], location="right")

    return figure


def plot_matrix(matrix, title):
    """
    Affiche une matrice sous forme de graphique.

    :param matrix: La matrice à afficher
    :param title: Le titre du graphique
    :return: La figure contenant le graphique
    """
    figure = plt.figure()
    plt.title(title)
    plot = plt.imshow(matrix, cmap="hot", interpolation="nearest")
    figure.colorbar(plot, cmap="hot", location="right", shrink=0.5)
    return figure


def plot_population_on_grid(population: Population, data, title):
    """
    Affiche la population de solutions sur une grille.

    :param population: La population de solutions
    :param data: Les données associées à la population
    :param title: Le titre du graphique
    :return: La figure contenant le graphique
    """
    figure = plt.figure()
    grid = np.zeros_like(data.get_occupancy_matrix(), dtype=int)

    for each_solution in population.get_solutions():
        liste_plots = each_solution.get_plots_list()
        color = uniform(6, 15)
        for plot in liste_plots:
            grid[plot.get_x()][plot.get_y()] = color

    for a in range(ROWS_NUMBER):
        for b in range(COLUMNS_NUMBER):
            if data.get_usage_map_matrix()[a][b] == ROAD:
                grid[a, b] = 5
            if data.get_usage_map_matrix()[a][b] == HABITATION:
                grid[a, b] = 20

    plot = plt.imshow(grid, cmap='terrain_r')
    plt.title(title)
    figure.colorbar(plot, location="right", shrink=0.5)
    return figure


def plot_non_dominated_solutions_on_grid(population: Population, data, title):
    figure = plt.figure()
    grid = np.zeros_like(data.get_occupancy_matrix(), dtype=int)

    for each_solution in population.get_non_dominated_solutions():
        liste_plots = each_solution.get_plots_list()
        color = uniform(6, 15)

        for plot in liste_plots:
            grid[plot.get_coordinates()] = color

    for a in range(ROWS_NUMBER):
        for b in range(COLUMNS_NUMBER):
            if data.get_usage_map_matrix()[a][b] == ROAD:
                grid[a, b] = 5
            if data.get_usage_map_matrix()[a][b] == HABITATION:
                grid[a, b] = 20

    plot = plt.imshow(grid, cmap='terrain_r')
    plt.title(title)
    figure.colorbar(plot, location="right", shrink=0.5)
    return figure


def plot_selected_solution_on_grid(population: Population, data, title):
    figure = plt.figure()
    grid = np.zeros_like(data.get_occupancy_matrix(), dtype=int)

    best_solution = population.get_selected_solution()  # Obtention de la meilleure solution

    liste_plots = best_solution.get_plots_list()
    color = 10

    for plot in liste_plots:
        grid[plot.get_coordinates()] = color

    for a in range(ROWS_NUMBER):
        for b in range(COLUMNS_NUMBER):
            if data.get_usage_map_matrix()[a][b] == ROAD:
                grid[a, b] = 20
            if data.get_usage_map_matrix()[a][b] == HABITATION:
                grid[a, b] = 16

    plot = plt.imshow(grid, cmap='nipy_spectral_r')
    plt.title(title)
    figure.colorbar(plot, location="right", shrink=0.5)
    return figure


def plot_optimal_pareto_front(population: Population, title):
    """
    Affiche le front de Pareto optimal.

    :param population: La population de solutions
    :param title: Le titre du graphique
    :return: La figure contenant le graphique
    """
    solutions = population.get_solutions()
    non_dominated_solutions = population.get_non_dominated_solutions()
    selected_solution = population.get_selected_solution()
    if selected_solution is not None:
        dominated_solutions = list(set(solutions) - set(non_dominated_solutions))
        non_dominated_solutions.remove(selected_solution)
    else:
        dominated_solutions = list(set(solutions) - set(non_dominated_solutions))

    x = []
    y = []
    z = []
    xn = []
    yn = []
    zn = []
    xs = []
    ys = []
    zs = []
    xi = []
    yi = []
    zi = []

    for dominated_solution in dominated_solutions:
        x.append(dominated_solution.get_productivity())
        y.append(dominated_solution.get_inhabited_area_proximity())
        z.append(dominated_solution.get_compactness())

    for non_dominated_solution in non_dominated_solutions:
        xn.append(non_dominated_solution.get_productivity())
        yn.append(non_dominated_solution.get_inhabited_area_proximity())
        zn.append(non_dominated_solution.get_compactness())

    if selected_solution is not None:
        xs.append(selected_solution.get_productivity())
        ys.append(selected_solution.get_inhabited_area_proximity())
        zs.append(selected_solution.get_compactness())

    xi.append(PRODUCTIVITY_MAX)
    yi.append(PROXIMITY_MAX)
    zi.append(COMPACTNESS_MAX)

    figure = plt.figure()
    ax = figure.add_subplot(111, projection='3d')
    ax.set_xlim(PRODUCTIVITY_MIN, PRODUCTIVITY_MAX)
    ax.set_ylim(PROXIMITY_MIN, PROXIMITY_MAX)
    ax.set_zlim(COMPACTNESS_MIN, COMPACTNESS_MAX)
    ax.scatter(x, y, z, c='b', marker='.', label='Solution (dominée)')
    ax.scatter(xn, yn, zn, c='r', marker='.', label='Solution non dominée')
    ax.scatter(xs, ys, zs, c='g', marker='.', label='Solution sélectionnée')
    ax.scatter(xi, yi, zi, c='c', marker='.', label='Solution idéale')
    ax.legend()
    ax.set_xlabel("Productivité")
    ax.set_ylabel("Proximité aux zones habités")
    ax.set_zlabel("Compacité")
    ax.set_title(title)

    return figure
